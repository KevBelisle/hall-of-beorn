@using HallOfBeorn.Models.Arkham.ViewModels
@model ArkhamSearchViewModel

@{
    ViewBag.Title = "Arkham Horror: The Card Game - Search";
}

@section scripts {
<script type="text/javascript" src="~/Scripts/arkhamCardSearch.js"></script>
}

@using (Html.BeginForm("Search", "Arkham", FormMethod.Post))
{
    <div style="margin-bottom:10px;">
        <div style="display:inline-block;min-width:300px;margin-right:4px;">@Html.TextBoxFor(x => x.Query, new { style = "text-align:left;width:95%;margin-right:4px;" })</div>
        <div style="display:inline-block;">
            <input type="submit" value="Search" class="search-button" />
            <a id="resetButton" href="#" class="clear-button">Clear</a>
            <span style="display:inline-block;">
            <span class="search-label-right">Sort</span>
            @Html.DropDownListFor(x => x.Sort, ArkhamSearchViewModel.Sorts, new { @class = "search-select-medium" })
            </span>
            <span style="display:inline-block">
            <span class="search-label-right">View</span>
            @Html.DropDownListFor(x => x.View, ArkhamSearchViewModel.Views, new { @class = "search-select-medium" })
            </span>
        </div>
    </div>

     <div class="search-row">
         <div class="search-section">Set</div>
        <div class="search-items">
            <span class="search-filter-fixed-long">
            <span class="search-label-short">Product</span>
            @Html.DropDownList("Product", ArkhamSearchViewModel.Products, new { @class = "search-select" })
            </span>

            <span class="search-filter-fixed-long">
            <span class="search-label-short">Artist</span>
            @Html.DropDownListFor(x => x.Artist, ArkhamSearchViewModel.ArtistValues, new { @class = "search-select" })
            </span>
        </div>
    </div>
    
     <div class="search-row">
         <div class="search-section">Type</div>
         <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-short">Card Type</span>
            @Html.DropDownListFor(x => x.CardType, ArkhamSearchViewModel.CardTypes, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Class Symbol</span>
            @Html.DropDownListFor(x => x.ClassSymbol, ArkhamSearchViewModel.ClassSymbolValues, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Deck Type</span>
            @Html.DropDownListFor(x => x.DeckType, ArkhamSearchViewModel.DeckTypes, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Unique</span>
            @Html.DropDownListFor(x => x.IsUnique, ArkhamSearchViewModel.UniquenessValues, new { @class = "search-select-short" })
            </span>
        </div>
    </div>

    <div class="search-row">
        <div class="search-section">Text</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-short">Trait</span>
            @Html.DropDownListFor(x => x.Trait, ArkhamSearchViewModel.Traits, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Keyword</span>
            @Html.DropDownListFor(x => x.Keyword, ArkhamSearchViewModel.Keywords, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Skill Icon</span>
            @Html.DropDownListFor(x => x.SkillIcon, ArkhamSearchViewModel.SkillIconValues, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Slot</span>
            @Html.DropDownListFor(x => x.Slot, ArkhamSearchViewModel.SlotValues, new { @class = "search-select-short" })
            </span>
        </div>
    </div>
    
    <div class="search-row">
        <div class="search-section"></div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-short">Victory</span>
            @Html.DropDownListFor(x => x.VictoryPoints, ArkhamSearchViewModel.VictoryPointsValues, new { @class = "search-select-short" })
            </span>
        </div>
    </div>
    
    <hr class="arkham-filterLine" />
    
    <div class="search-row">
        <div class="search-section">Stats</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Willpower.png"></span>
            @Html.DropDownListFor(x => x.WillpowerOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Willpower, ArkhamSearchViewModel.WillpowerValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Intellect.png"></span>
            @Html.DropDownListFor(x => x.IntellectOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Intellect, ArkhamSearchViewModel.IntellectValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Combat.png"></span>
            @Html.DropDownListFor(x => x.CombatOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Combat, ArkhamSearchViewModel.CombatValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Agility.png"></span>
            @Html.DropDownListFor(x => x.AgilityOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Agility, ArkhamSearchViewModel.AgilityValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <div class="search-row">
        <div class="search-section"></div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Health.png" width="17" height="20"></span>
            @Html.DropDownListFor(x => x.HealthOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Health, ArkhamSearchViewModel.HealthValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny"><img src="/Images/Arkham/Sanity.png" width="20" height="16"></span>
            @Html.DropDownListFor(x => x.SanityOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Sanity, ArkhamSearchViewModel.SanityValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Cost</span>
            @Html.DropDownListFor(x => x.CostOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Cost, ArkhamSearchViewModel.CostValues, new { @class = "search-select-tiny" })
            </span>
            
            <span class="search-filter-fixed">
            <span class="search-label-tiny">Level</span>
            @Html.DropDownListFor(x => x.LevelOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Level, ArkhamSearchViewModel.LevelValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <hr class="arkham-filterLine" />
        
    <div class="search-row">
        <div class="search-section">Act/Agenda</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny">Doom Thresh.</span>
            @Html.DropDownListFor(x => x.DoomThresholdOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.DoomThreshold, ArkhamSearchViewModel.DoomThresholdValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Clue Thresh.</span>
            @Html.DropDownListFor(x => x.ClueThresholdOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.ClueThreshold, ArkhamSearchViewModel.ClueThresholdValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <div class="search-row">
        <div class="search-section">Enemy</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny">Fight</span>
            @Html.DropDownListFor(x => x.EnemyFightValueOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.EnemyFightValue, ArkhamSearchViewModel.EnemyFightValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Health</span>
            @Html.DropDownListFor(x => x.EnemyHealthValueOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.EnemyHealthValue, ArkhamSearchViewModel.EnemyHealthValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Evade</span>
            @Html.DropDownListFor(x => x.EnemyEvadeValueOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.EnemyEvadeValue, ArkhamSearchViewModel.EnemyEvadeValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <div class="search-row">
        <div class="search-section"></div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny">Damage</span>
            @Html.DropDownListFor(x => x.DamageOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Damage, ArkhamSearchViewModel.DamageValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Horror</span>
            @Html.DropDownListFor(x => x.HorrorOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Horror, ArkhamSearchViewModel.HorrorValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <div class="search-row">
        <div class="search-section">Location</div>
        <div class="search-items">
            <span class="search-filter-fixed">
                <span class="search-label-short">Symbol</span>
                @Html.DropDownListFor(x => x.LocationSymbol, ArkhamSearchViewModel.ConnectionSymbols, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
                <span class="search-label-short">Connects To</span>
                @Html.DropDownListFor(x => x.ConnectsTo, ArkhamSearchViewModel.ConnectionSymbols, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Shroud</span>
            @Html.DropDownListFor(x => x.ShroudOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.Shroud, ArkhamSearchViewModel.ShroudValues, new { @class = "search-select-tiny" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny">Clues</span>
            @Html.DropDownListFor(x => x.ClueValueOp, ArkhamSearchViewModel.NumericOperators, new { @class = "search-select-tiny" })
            @Html.DropDownListFor(x => x.ClueValue, ArkhamSearchViewModel.ClueValues, new { @class = "search-select-tiny" })
            </span>
        </div>
    </div>
    <span class="results-count-label">@Model.GetResultsCount()</span>
    
    foreach (var card in @Model.Cards())
    {
        <hr class="arkham-filterLine" />
    
        if (!@Model.View.HasValue || @Model.View.Value == ArkhamSearchView.Card || @Model.View.Value == ArkhamSearchView.Card_Image) {
            <div style="display:inline-block"><img src="@card.ImagePathFront" height="@card.ImageHeight" /></div>
            if (!string.IsNullOrEmpty(@card.ImagePathBack))
            {
                <div style="display:inline-block"><img src="@card.ImagePathBack" height="@card.ImageHeight"/></div>
            }
        }
        <div style="display:inline-block">
            <div style="font-size:1.75em;font-family:Verdana;">
            @if (!string.IsNullOrEmpty(@card.ClassName))
            {
                <img src="@card.ClassIcon" width="32" height="32" title="Class: @card.ClassName"/>@: &nbsp;
            }
            @if (@card.IsUnique)
            {
                <a href="@card.SearchUrl"><img src="/Images/Arkham/Unique.png" style="margin-right:8px;margin-bottom:-2px;height:22px;width:22px;"/>@card.DisplayName</a>
            } else {
                <a href="@card.SearchUrl">@card.DisplayName</a>
            }
            </div>
            @if (!string.IsNullOrEmpty(@card.Subtitle)) {
                <h3>@card.Subtitle</h3>
            }
            <div><b>
                @card.CardType

                @if (!string.IsNullOrEmpty(card.Sequence)) {
                    @card.Sequence
                }
                 </b>
            </div>
            @if (@card.HasTraits()) {
                <div class="arkham-statSection">
                    @foreach (var trait in @card.Traits()) {
                        <span>@Html.Raw(trait.ToString())</span>
                    }
                </div>
            }
            @switch (@card.CardType)
            {
                case "Investigator":
                    <div>
                        <span>@card.Willpower <img src="/Images/Arkham/Willpower.png" title="Willpower" /></span>
                        <span>@card.Intellect <img src="/Images/Arkham/Intellect.png" title="Intellect"/></span>
                        <span>@card.Combat <img src="/Images/Arkham/Combat.png" title="Combat"/></span>
                        <span>@card.Agility <img src="/Images/Arkham/Agility.png" title="Agility"/></span>
                    </div>
                    <div class="arkham-statSection">
                        <span class="arkham-health" title="Health"><span class="arkham-energyInner arkham-healthInner">@card.Health</span></span>
                        <span class="arkham-sanity" title="Sanity"><span class="arkham-energyInner arkham-sanityInner">@card.Sanity</span></span>
                    </div>
                    break;
                case "Asset":
                    <div>
                        <span class="arkham-circle arkham-cost" title="Cost"><span class="arkham-valueInner">@card.Cost</span></span>
                    
                        @if (!string.IsNullOrEmpty(@card.SlotImagePath)) {
                            <span><a href="@card.SlotSearch" target="_blank"><img src="@card.SlotImagePath" title="Asset Slot" height="32" width="32"/></a></span>
                        }

                        @if (!string.IsNullOrEmpty(@card.Health) || !string.IsNullOrEmpty(@card.Sanity)) {
                            <div class="arkham-statSection">
                                <span class="arkham-health" title="Health"><span class="arkham-energyInner arkham-healthInner">@card.Health</span></span>
                                <span class="arkham-sanity" title="Sanity"><span class="arkham-energyInner arkham-sanityInner">@card.Sanity</span></span>
                            </div>  
                        }
                    </div>
                    break;
                case "Event":
                    <div><span class="arkham-circle arkham-cost" title="Cost"><span class="arkham-valueInner">@card.Cost</span></span></div>
                    break;
                case "Location":
                    <div>
                        <div class="arkham-circle arkham-shroud" title="Shroud"><div class="arkham-valueInner">@Html.Raw(@card.Shroud)</div></div>
                        <div class="arkham-circle arkham-clueValue" title="Clue Value"><div class="arkham-valueInner">@Html.Raw(@card.ClueValue)</div></div>
                    </div>
                    break;
                case "Enemy":
                    <div class="arkham-statSection">
                        <div class="arkham-enemyStatSection">@Html.Raw(@card.EnemyStatHtml())</div>
                    </div>
                    <div class="arkham-statSection">
                        <span class="arkham-health" title="Damage"><span class="arkham-energyInner arkham-healthInner">@card.Damage</span></span>
                        <span class="arkham-sanity" title="Horror"><span class="arkham-energyInner arkham-sanityInner">@card.Horror</span></span>
                    </div>
                    break;
                case "Act":
                    <div class="arkham-statSection">
                        <div class="arkham-circle arkham-clueValue" title="Clue Threshold"><div class="arkham-valueInner">@Html.Raw(@card.ClueThreshold)</div></div>
                    </div>
                    break;
                case "Agenda":
                    <div class="arkham-statSection">
                        <div class="arkham-doomThreshold" title="Doom Threshold"><div class="arkham-valueInner">@Html.Raw(@card.DoomThreshold)</div></div>
                    </div>
                    break;
                       
            }
            @if ((!@Model.View.HasValue || @Model.View.Value == ArkhamSearchView.Card || @Model.View.Value == ArkhamSearchView.Card_Text) && !string.IsNullOrEmpty(@card.BodyHtml()))
            {
                @Html.Raw(@card.BodyHtml())
            }
        </div>
    }
}