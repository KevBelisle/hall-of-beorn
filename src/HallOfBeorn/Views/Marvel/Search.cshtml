@using HallOfBeorn.Models.Marvel
@using HallOfBeorn.Models.Marvel.ViewModels
@model MarvelSearchViewModel

@{
    ViewBag.Title = "Marvel Champions: Search";
}

@section scripts {
<script type="text/javascript" src="~/Scripts/Marvel/marvelCardSearch1.js"></script>
<script type="text/javascript" src="~/Scripts/Marvel/marvelAutocomplete1.js"></script>
<script type="text/javascript">
    $(function () {
        $("#Query").autocomplete({
            source: autocompleteSource,
            minLength: 2
        });
        $("#Query").autocomplete("widget").addClass("autocompleteClass");
    });
</script>    

}

@using (Html.BeginForm("Search", "Marvel", FormMethod.Post))
{
    <div style="margin-bottom:10px;">
        <div style="display:inline-block;min-width:300px;margin-right:4px;">@Html.TextBoxFor(x => x.Query, new { style = "text-align:left;width:95%;margin-right:4px;" })</div>
        <div style="display:inline-block;">
            <input type="submit" value="Search" class="search-button" />
            <a id="resetButton" href="#" class="clear-button">Clear</a>
            <span style="display:inline-block;">
            <span class="search-label-right">Sort</span>
            @Html.DropDownListFor(x => x.Sort, MarvelSearchViewModel.Sorts, new { @class = "search-select-medium" })
            </span>
            <span style="display:inline-block">
            <span class="search-label-right">View</span>
            @Html.DropDownListFor(x => x.View, MarvelSearchViewModel.Views, new { @class = "search-select-medium" })
            </span>
        </div>
    </div>

     <div class="search-row">
         <div class="search-section">Set</div>
        <div class="search-items">
            <span class="search-filter-fixed-long">
            <span class="search-label-short">Product</span>
            @Html.DropDownListFor(x => x.Product, MarvelSearchViewModel.Products, new { @class = "search-select" })
            </span>
        </div>
    </div>
    
     <div class="search-row">
         <div class="search-section">Type</div>
         <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-short">Card Type</span>
            @Html.DropDownListFor(x => x.CardType, MarvelSearchViewModel.CardTypes, new { @class = "search-select-short" })
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Deck Type</span>
            @Html.DropDownListFor(x => x.DeckType, MarvelSearchViewModel.DeckTypes, new { @class = "search-select-short" })
            </span>
        </div>
    </div>

    <div class="search-row">
        <div class="search-section">Text</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-short">Trait</span>
            @* @Html.DropDownListFor(x => x.Trait, MarvelSearchViewModel.Traits, new { @class = "search-select-short" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-short">Keyword</span>
            @* @Html.DropDownListFor(x => x.Keyword, MarvelSearchViewModel.Keywords, new { @class = "search-select-short" }) *@
            </span>
        </div>
    </div>
    
    <div class="search-row">
        <div class="search-section"></div>
        <div class="search-items">
            
            <span class="search-filter-fixed">
            <span class="search-label-short">Unique</span>
            @* @Html.DropDownListFor(x => x.IsUnique, MarvelSearchViewModel.UniquenessValues, new { @class = "search-select-short" }) *@
            </span>
        </div>
    </div>
    
    <hr class="arkham-filterLine" />
    
    <div class="search-row">
        <div class="search-section">Stats</div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny2">TWH</span>
            @Html.DropDownListFor(x => x.ThwartOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.Thwart, MarvelSearchViewModel.ThwartValues, new { @class = "search-select-tiny2" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny2">ATT</span>
            @Html.DropDownListFor(x => x.AttackOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.Attack, MarvelSearchViewModel.AttackValues, new { @class = "search-select-tiny2" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny2">DEF</span>
            @Html.DropDownListFor(x => x.DefenseOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.Defense, MarvelSearchViewModel.CombatValues, new { @class = "search-select-tiny2" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny2">REC</span>
            @Html.DropDownListFor(x => x.RecoverOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.Recover, MarvelSearchViewModel.RecoverValues, new { @class = "search-select-tiny2" }) *@
            </span>
        </div>
    </div>
    <div class="search-row">
        <div class="search-section"></div>
        <div class="search-items">
            <span class="search-filter-fixed">
            <span class="search-label-tiny2">HIT POINTS</span>
            @Html.DropDownListFor(x => x.HitPointsOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.HitPoints, MarvelSearchViewModel.HitPointValues, new { @class = "search-select-tiny2" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny2">HAND SIZE</span>
            @Html.DropDownListFor(x => x.HandSizeOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.HandSize, MarvelSearchViewModel.HandSizeValues, new { @class = "search-select-tiny2" }) *@
            </span>

            <span class="search-filter-fixed">
            <span class="search-label-tiny2">Cost</span>
            @Html.DropDownListFor(x => x.CostOp, MarvelSearchViewModel.NumericOperators, new { @class = "search-select-tiny2" })
            @* @Html.DropDownListFor(x => x.Cost, MarvelSearchViewModel.CostValues, new { @class = "search-select-tiny2" }) *@
            </span>
        </div>
    </div>
    <hr class="arkham-filterLine" />
        
    <div class="search-row">
        <div class="search-section">Scenario</div>
        <div class="search-items">
        </div>
    </div>
    <div class="search-row">
        <div class="search-section">Placeholder</div>
        <div class="search-items">
        </div>
    </div>
    <div class="search-row">
        <div class="search-section">Placeholder</div>
        <div class="search-items">
        </div>
    </div>
    <div class="search-row">
        <div class="search-section">Placeholder</div>
        <div class="search-items">
            
        </div>
    </div>
    <span class="results-count-label">@Model.GetResultsCount()</span>
    
    foreach (var card in @Model.Cards())
    {
        <hr class="arkham-filterLine" />
    
        if (!@Model.View.HasValue || @Model.View.Value == MarvelSearchView.Card || @Model.View.Value == MarvelSearchView.Card_Image) {
            <div style="display: inline-block">
                <div style="display: inline-block"><img src="@card.CardFrontImagePath" height="@card.ImageHeight" width="@card.ImageWidth" /></div>
                @if (!string.IsNullOrEmpty(@card.CardBackImagePath))
                {
                    <div style="display:inline-block"><img src="@card.CardBackImagePath" height="@card.ImageHeight"/></div>
                }
            </div>
        }
        <div style="display:inline-block;max-width:500px;vertical-align:top;margin-left: 4px;">
            <div class="arkham-statSection">
                <div class="arkham-statBox top">
                    <div class="arkham-title">
                    @if (@card.IsUnique)
                    {
                        <a href="@card.SearchUrl"><img src="/Images/Arkham/Unique.png" class="arkham-unique"/>@card.Title</a>
                    } else {
                        <a href="@card.SearchUrl">@card.Title</a>
                    }
                    </div>
                </div>
                
                @if (@card.CardType == MarvelCardType.Hero) {
                    <div class="arkham-statBox arkham-skillSection">
                        <a href="/Marvel?Thwart=@card.Thwart&ThwartOp=eq"><span class="arkham-skillBox">THW</span><span class="arkham-skillValue">@card.Thwart</span></a>
                        <a href="/Marvel?Attack=@card.Attack&AttackOp=eq"><span class="arkham-skillBox">ATT</span><span class="arkham-skillValue">@card.Attack</span></a>
                        <a href="/Marvel?Defense=@card.Defense&DefenseOp=eq"><span class="arkham-skillBox">DEF</span><span class="arkham-skillValue">@card.Defense</span></a>
                        <a href="/Marvel?Recover=@card.Recover&RecoverOp=eq"><span class="arkham-skillBox">REC</span><span class="arkham-skillValue">@card.Recover</span></a>
                    </div>
                }
                @*
                @if (!string.IsNullOrEmpty(@card.Cost)) {
                    <div class="arkham-statBox top"><a href="/Arkham?Cost=@card.Cost&CostOp=eq"><span class="arkham-circle arkham-cost" title="Cost"><span class="arkham-valueInner">@card.Cost</span></span></a></div>
                }
                @if (!string.IsNullOrEmpty(@card.ClueThreshold)) {
                    <div class="arkham-statBox top"><div class="arkham-circle arkham-clueValue" title="Clue Threshold"><div class="arkham-valueInner">@Html.Raw(@card.ClueThreshold)</div></div></div>
                }
                @if (!string.IsNullOrEmpty(@card.DoomThreshold)) {
                    <div class="arkham-statBox top"><div class="arkham-doomThreshold" title="Doom Threshold"><div class="arkham-valueInner">@Html.Raw(@card.DoomThreshold)</div></div></div>
                }
                @if (!string.IsNullOrEmpty(@card.Shroud)) {
                    <div class="arkham-statBox top"><div class="arkham-circle arkham-shroud" title="Shroud"><div class="arkham-valueInner">@Html.Raw(@card.Shroud)</div></div></div>    
                }
                @if (!string.IsNullOrEmpty(@card.ClueValue)) {
                    <div class="arkham-statBox top"><div class="arkham-circle arkham-clueValue" title="Clue Value"><div class="arkham-valueInner">@Html.Raw(@card.ClueValue)</div></div></div>   
                }
                @if (@card.CardType == "Enemy") {
                    <div class="arkham-enemyStatSection">@Html.Raw(@card.EnemyStatHtml())</div>
                }
            </div>
            
            @if (@card.HasSkillIcons()) {
                <div class="arkham-statSection">
                    @foreach (var icon in @card.SkillIcons()) {
                        <span>@Html.Raw(icon.ToString())</span>
                    }
                </div>
            }

            @if (@card.HasTraits()) {
                <div class="arkham-statSection">
                    @foreach (var trait in @card.Traits()) {
                        <span>@Html.Raw(trait.ToString())</span>
                    }
                </div>
            }

            @if ((!@Model.View.HasValue || @Model.View.Value == ArkhamSearchView.Card || @Model.View.Value == ArkhamSearchView.Card_Text) && !string.IsNullOrEmpty(@card.FrontBodyHtml()))
            {
                @Html.Raw(@card.FrontBodyHtml())
            }

            <div class="arkham-statSection">
                @if (!string.IsNullOrEmpty(@card.Health) || !string.IsNullOrEmpty(@card.Sanity)) {
                    <a href="/Arkham?Health=@card.Health"><span class="arkham-health" title="Health"><span class="arkham-energyInner arkham-healthInner">@card.Health</span></span></a>
                    <a href="/Arkham?Sanity=@card.Sanity"><span class="arkham-sanity" title="Sanity"><span class="arkham-energyInner arkham-sanityInner">@card.Sanity</span></span></a>
                }

                @if (!string.IsNullOrEmpty(@card.SlotImagePath)) {
                    <div class="arkham-slot"><a href="@card.SlotSearch" target="_blank"><img src="@card.SlotImagePath" title="Asset Slot" height="32" width="32"/></a></div>
                }
            </div>

            @if (!string.IsNullOrEmpty(@card.Victory)) {
                <div class="arkham-statSection"><a href="/Arkham?VictoryPoints=@card.Victory" title="Victory Points"><b>@card.Victory.</b></a></div>
            }

            <div class="arkham-statSection">
            @if (@card.Damage > 0) {
                <div class="arkham-statBox arkham-damageBox">
                @for (var i=0;i<@card.Damage;i++) {
                    <img src="/Images/Arkham/Health.png" height="15" width="12" title="Damage"/> 
                }
                </div>
            }

            @if (@card.Horror > 0) {
                <div class="arkham-statBox arkham-horrorBox">
                @for (var i=0;i<@card.Horror;i++) {
                    <img src="/Images/Arkham/Sanity.png" height="14" width="17" title="Horror" />
                }
                </div>
            }

            *@
            </div>
        </div>
    }
}